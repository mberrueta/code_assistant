defmodule CodeAssistan.Tasks.AiderCommandTest do
  use ExUnit.Case, async: true
  alias CodeAssistan.Tasks.AiderCommand

  test "generates the correct aider command for a single primary file" do
    context = %{
      primary_files: ["test/primary_one_test.exs"],
      global_readonly_files: [
        "assets/prompts/elixir.md",
        "assets/prompts/elixir_tests.md",
        "test/support/factories/factory.ex",
        "test/test_helper.exs"
      ],
      readonly_files: %{
        "test/primary_one_test.exs" => [
          "lib/primary_one.ex",
          "lib/primary_one/helper_a.ex",
          "lib/primary_one/helper_b.ex"
        ]
      },
      positive_prompt: "Please act as an expert Elixir developer.",
      negative_prompt: "Do not use basic `fixtures`.",
      aider_commands: %{}
    }

    expected_parts = [
      "aider",
      "--read assets/prompts/elixir.md",
      "--read assets/prompts/elixir_tests.md",
      "--read test/support/factories/factory.ex",
      "--read test/test_helper.exs",
      "--read lib/primary_one.ex",
      "--read lib/primary_one/helper_a.ex",
      "--read lib/primary_one/helper_b.ex",
      "--file test/primary_one_test.exs",
      "--message \"Positive Prompt: Please act as an expert Elixir developer.\n\n\nNegative Prompt: Do not use basic `fixtures`.\n\n\""
    ]

    expected_command = Enum.join(expected_parts, " ")

    result_context = AiderCommand.call(context)
    actual_command = result_context.aider_commands["test/primary_one_test.exs"]

    assert String.trim(actual_command) == expected_command
  end

  test "generates commands for multiple primary files" do
    context = %{
      primary_files: ["test/file1_test.exs", "test/file2_test.exs"],
      global_readonly_files: ["global.md"],
      readonly_files: %{
        "test/file1_test.exs" => ["lib/file1.ex"],
        "test/file2_test.exs" => ["lib/file2.ex", "lib/helper.ex"]
      },
      positive_prompt: "Positive",
      negative_prompt: "Negative",
      aider_commands: %{}
    }

    expected_parts1 = [
      "aider",
      "--read global.md",
      "--read lib/file1.ex",
      "--file test/file1_test.exs",
      "--message \"Positive Prompt: Positive\n\n\nNegative Prompt: Negative\n\n\""
    ]

    expected_command1 = Enum.join(expected_parts1, " ")

    expected_parts2 = [
      "aider",
      "--read global.md",
      "--read lib/file2.ex",
      "--read lib/helper.ex",
      "--file test/file2_test.exs",
      "--message \"Positive Prompt: Positive\n\n\nNegative Prompt: Negative\n\n\""
    ]

    expected_command2 = Enum.join(expected_parts2, " ")

    result_context = AiderCommand.call(context)

    assert String.trim(result_context.aider_commands["test/file1_test.exs"]) == expected_command1
    assert String.trim(result_context.aider_commands["test/file2_test.exs"]) == expected_command2
  end

  test "handles missing positive prompt" do
    context = %{
      primary_files: ["test/file_test.exs"],
      global_readonly_files: [],
      readonly_files: %{"test/file_test.exs" => ["lib/file.ex"]},
      negative_prompt: "Negative only",
      aider_commands: %{}
    }

    expected_parts = [
      "aider",
      "--read lib/file.ex",
      "--file test/file_test.exs",
      "--message \"Negative Prompt: Negative only\n\n\""
    ]

    expected_command = Enum.join(expected_parts, " ")

    result_context = AiderCommand.call(context)
    actual_command = result_context.aider_commands["test/file_test.exs"]
    assert String.trim(actual_command) == expected_command
  end

  test "handles missing negative prompt" do
    context = %{
      primary_files: ["test/file_test.exs"],
      global_readonly_files: [],
      readonly_files: %{"test/file_test.exs" => ["lib/file.ex"]},
      positive_prompt: "Positive only",
      aider_commands: %{}
    }

    expected_parts = [
      "aider",
      "--read lib/file.ex",
      "--file test/file_test.exs",
      "--message \"Positive Prompt: Positive only\n\n\""
    ]

    expected_command = Enum.join(expected_parts, " ")

    result_context = AiderCommand.call(context)
    actual_command = result_context.aider_commands["test/file_test.exs"]
    assert String.trim(actual_command) == expected_command
  end

  test "handles missing both prompts" do
    context = %{
      primary_files: ["test/file_test.exs"],
      global_readonly_files: [],
      readonly_files: %{"test/file_test.exs" => ["lib/file.ex"]},
      aider_commands: %{}
    }

    # When prompts are missing, add_message_arg returns "", so it's not in expected_parts.
    # The actual command generated by do_gen_command will be like "--read lib/file.ex --file test/file_test.exs "
    # (note the trailing space because the message part was effectively an empty string in the join list).
    # String.trim will handle this.
    expected_parts = [
      "aider",
      "--read lib/file.ex",
      "--file test/file_test.exs"
    ]

    expected_command = Enum.join(expected_parts, " ")

    result_context = AiderCommand.call(context)
    actual_command = result_context.aider_commands["test/file_test.exs"]

    assert String.trim(actual_command) == expected_command
  end

  test "handles empty readonly_files for a primary_file" do
    context = %{
      primary_files: ["test/file_test.exs"],
      global_readonly_files: ["global.md"],
      # Empty local readonly files
      readonly_files: %{"test/file_test.exs" => []},
      positive_prompt: "Prompt",
      aider_commands: %{}
    }

    expected_parts = [
      "aider",
      "--read global.md",
      "--file test/file_test.exs",
      "--message \"Positive Prompt: Prompt\n\n\""
    ]

    expected_command = Enum.join(expected_parts, " ")

    result_context = AiderCommand.call(context)
    actual_command = result_context.aider_commands["test/file_test.exs"]
    assert String.trim(actual_command) == expected_command
  end

  test "handles empty global_readonly_files" do
    context = %{
      primary_files: ["test/file_test.exs"],
      # Empty global readonly files
      global_readonly_files: [],
      readonly_files: %{"test/file_test.exs" => ["lib/file.ex"]},
      positive_prompt: "Prompt",
      aider_commands: %{}
    }

    expected_parts = [
      "aider",
      "--read lib/file.ex",
      "--file test/file_test.exs",
      "--message \"Positive Prompt: Prompt\n\n\""
    ]

    expected_command = Enum.join(expected_parts, " ")

    result_context = AiderCommand.call(context)
    actual_command = result_context.aider_commands["test/file_test.exs"]
    assert String.trim(actual_command) == expected_command
  end
end
